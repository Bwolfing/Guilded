@using Microsoft.AspNetCore.Mvc.Rendering
@model ThreadViewModel
@{
    ViewData[ViewDataKeys.Title] = Model.Title;
}

<h2>
    @Model.Title
    @if (Model.IsLocked)
    {
        <i class="lock icon" title="Locked"></i>
    }
    @if (Model.IsPinned)
    {
        <i class="fa-sticky-note icon" title="Sticky"></i>
    }
</h2>



<pager pager-vertical-location="Top" />

<div class="ui comments">
    @if (Model.CurrentPage == 1)
    {
        <div class="comment" data-thread-id="@Model.Id">
            <a class="avatar" href="#">
                <img src="https://static.tplugin.com/tplugin/img/unknown-user.png"
                     styles="height: 35px;"/>
            </a>
            <div class="content">
                <a class="author">
                    @Model.Author
                </a>
                <div class="metadata">
                    <span class="date">
                        @Model.CreatedAt.ToRelativeTimeStamp()
                    </span>
                </div>
                <div class="text">
                    <markdown-content/>
                </div>
                <div class="actions">
                    <a class="reply" href="#">
                        Reply
                    </a>
                    <a class="quote" href="#">
                        Quote
                    </a>
                </div>
            </div>
        </div>
    }
    
    @Html.DisplayFor(m => m.Models)
</div>

<pager pager-vertical-location="Bottom" />

<form class="ui form" data-action="@Url.Action("PostNewReplyToThread", "Replies", new {area = "Forums", threadId = Model.Id})"
      data-ajax="true" data-ajax-method="post" asp-antiforgery="true">
    @{ await Html.RenderPartialAsync("CreateReplyViewModel", model: new CreateReplyViewModel()); }
</form>