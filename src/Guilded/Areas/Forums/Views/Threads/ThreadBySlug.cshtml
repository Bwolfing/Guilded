@using Guilded.Areas.Admin.DAL;
@model ThreadViewModel
@inject IUsersDataContext UserDataContext;
@inject IRolesDataContext RoleDataContext; 
@{
    ViewData[ViewDataKeys.Title] = Model.Title;

    var currentUser = await UserDataContext.GetUserFromClaimsPrincipalAsync(User);
    var userRole = await UserDataContext.GetRoleForUserAsync(currentUser);
    var roleClaims = RoleDataContext.GetClaimsForRole(userRole);
}

@section Scripts {
    <environment names="Development">
        <script src="~/js/forums/threads.js"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="~/js/forums/threads.min.js"></script>
    </environment>
}

<h2>
    @Model.Title
    @if (Model.IsLocked)
    {
        <i class="lock icon" title="Locked"></i>
    }
    @if (Model.IsPinned)
    {
        <i class="fa-sticky-note icon" title="Sticky"></i>
    }
</h2>

<input type="hidden" class="last-page" value="@(Model.PagerUrl + "?page=-1")"/>

<pager pager-vertical-location="Top" />

<div class="ui thread comments">
    @if (Model.CurrentPage == 1)
    {
        <div class="comment" data-thread-id="@Model.Id">
            <a class="avatar" href="#">
                <img src="https://static.tplugin.com/tplugin/img/unknown-user.png"
                     styles="height: 35px;"/>
            </a>
            <div class="content">
                <a class="author">
                    @Model.Author
                </a>
                <div class="metadata">
                    <span class="date">
                        @Model.CreatedAt.ToRelativeTimeStamp()
                    </span>
                </div>
                <div class="text">
                    <markdown-content/>
                </div>
                <div class="actions">
                    @if (!Model.IsLocked)
                    {
                        <a role-claim-protected required-claim="@RoleClaimValues.ForumsWriter" class="reply" asp-fragment="create-reply">
                            <i class="reply icon"></i> Reply
                        </a>
                    }
                    @{ await Html.RenderPartialAsync("IForumPost", Model); }
                </div>
            </div>
        </div>
    }
    
    @Html.DisplayFor(m => m.Models)
</div>

<pager pager-vertical-location="Bottom" />

<div id="create-reply-wrapper">
    <h3>
        Post a reply
    </h3>
    @if (!Model.IsLocked)
    {
        if (roleClaims.Any(c => c.Value == RoleClaimValues.ForumsWriterClaim))
        {
            await Html.RenderPartialAsync("CreateReplyViewModel", model: new CreateReplyViewModel {ThreadId = Model.Id});
        }
        else
        {
            <div class="ui center segment">
                You do not have permission to post to the forums.
            </div>
        }
    }
    else
    {
        <div class="ui center segment">
            <p>
                This thread is locked.
            </p>
        </div>
    }
</div>

